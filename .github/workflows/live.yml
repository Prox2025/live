name: Montar vídeo e iniciar Live Facebook

on:
  workflow_dispatch:
    inputs:
      id:
        description: 'ID do evento / live'
        required: true
        type: string
      video_drive_id:
        description: 'ID do vídeo principal no Google Drive'
        required: true
        type: string
      chave_json:
        description: 'Chave JSON completa em texto (string)'
        required: true
        type: string
      logo_id:
        description: 'ID do arquivo logo (opcional)'
        required: false
        type: string
      video_extra_1:
        description: 'ID do vídeo extra 1 (opcional)'
        required: false
        type: string
      video_extra_2:
        description: 'ID do vídeo extra 2 (opcional)'
        required: false
        type: string
      video_extra_3:
        description: 'ID do vídeo extra 3 (opcional)'
        required: false
        type: string
      stream_url:
        description: 'URL da stream do Facebook para iniciar a live'
        required: true
        type: string

jobs:
  montar-e-live:
    runs-on: ubuntu-latest

    steps:
      - name: 🔽 Clonar repositório
        uses: actions/checkout@v4

      - name: 🔐 Salvar chave.json
        run: echo "${{ github.event.inputs.chave_json }}" > chave.json

      - name: 🧾 Criar input.json
        run: |
          videos_opcionais='[]'
          if [ -n "${{ github.event.inputs.video_extra_1 }}" ]; then
            videos_opcionais="[\"${{ github.event.inputs.video_extra_1 }}\"]"
          fi
          if [ -n "${{ github.event.inputs.video_extra_2 }}" ]; then
            if [ "$videos_opcionais" = "[]" ]; then
              videos_opcionais="[\"${{ github.event.inputs.video_extra_2 }}\"]"
            else
              videos_opcionais=$(echo $videos_opcionais | sed 's/]$/, \"${{ github.event.inputs.video_extra_2 }}\"]/')
            fi
          fi
          if [ -n "${{ github.event.inputs.video_extra_3 }}" ]; then
            if [ "$videos_opcionais" = "[]" ]; then
              videos_opcionais="[\"${{ github.event.inputs.video_extra_3 }}\"]"
            else
              videos_opcionais=$(echo $videos_opcionais | sed 's/]$/, \"${{ github.event.inputs.video_extra_3 }}\"]/')
            fi
          fi
          cat << EOF > input.json
{
  "id": "${{ github.event.inputs.id }}",
  "video_principal": "${{ github.event.inputs.video_drive_id }}",
  "logo_id": "${{ github.event.inputs.logo_id }}",
  "videos_opcionais": $videos_opcionais,
  "stream_url": "${{ github.event.inputs.stream_url }}"
}
EOF

      - name: ⚙️ Instalar dependências
        run: |
          sudo apt update
          sudo apt install -y ffmpeg nodejs npm
          npm install googleapis puppeteer

      - name: 🧪 Verificar ambiente
        run: |
          node -v
          ffmpeg -version
          ls -la
          cat input.json

      - name: 🧠 Executar unir.js
        run: node unir.js
        env:
          KEYFILE: chave.json
          INPUTFILE: input.json

      - name: ⬇️ Baixar logo (se fornecido)
        if: ${{ github.event.inputs.logo_id != '' }}
        run: |
          node -e "
            const fs = require('fs');
            const { google } = require('googleapis');
            const keyFile = 'chave.json';
            async function baixar() {
              const auth = new (require('googleapis').google.auth.GoogleAuth)({keyFile, scopes: ['https://www.googleapis.com/auth/drive.readonly']});
              const client = await auth.getClient();
              const drive = google.drive({version: 'v3', auth: client});
              const dest = fs.createWriteStream('logo.png');
              const res = await drive.files.get({fileId: '${{ github.event.inputs.logo_id }}', alt: 'media'}, {responseType: 'stream'});
              res.data.pipe(dest);
              await new Promise(resolve => dest.on('finish', resolve));
              console.log('Logo baixado');
            }
            baixar().catch(e => {console.error(e); process.exit(1);});
          "

      - name: 📂 Salvar stream_info.json
        run: |
          echo "{\"stream_url\":\"${{ github.event.inputs.stream_url }}\",\"video_id\":\"${{ github.event.inputs.id }}\"}" > stream_info.json

      - name: 📤 Upload artifacts (vídeo, logo, dados da stream)
        uses: actions/upload-artifact@v4
        with:
          name: live-artifacts
          path: |
            video_unido.mp4
            logo.png
            stream_info.json

      - name: 🧠 Executar live.js para iniciar live Facebook com vídeo e logo
        run: node live.js
