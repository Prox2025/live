name: Montar vídeo do Google Drive e iniciar Live

on:
  workflow_dispatch:
    inputs:
      id:
        description: 'ID do evento / live'
        required: true
        type: string
      video_drive_id:
        description: 'ID do vídeo principal no Google Drive'
        required: true
        type: string
      chave_json:
        description: 'Chave JSON completa (string)'
        required: true
        type: string
      logo_id:
        description: 'ID do arquivo logo (opcional)'
        required: false
        type: string
      video_extra_1:
        description: 'ID do vídeo extra 1 (opcional)'
        required: false
        type: string
      video_extra_2:
        description: 'ID do vídeo extra 2 (opcional)'
        required: false
        type: string
      video_extra_3:
        description: 'ID do vídeo extra 3 (opcional)'
        required: false
        type: string
      stream_url:
        description: 'URL da stream do Facebook'
        required: true
        type: string

jobs:
  montar-e-live:
    runs-on: ubuntu-latest

    steps:
      - name: 🔽 Clonar repositório
        uses: actions/checkout@v4

      - name: 🛠️ Instalar dependências
        run: |
          sudo apt update
          sudo apt install -y ffmpeg nodejs npm jq
          npm install googleapis puppeteer

      - name: 🔐 Salvar chave.json
        run: echo '${{ github.event.inputs.chave_json }}' > chave.json

      - name: 🧾 Criar input.json válido com jq
        run: |
          # Monta lista de vídeos opcionais removendo vazios
          extras=$(jq -n --arg v1 "${{ github.event.inputs.video_extra_1 }}" \
                        --arg v2 "${{ github.event.inputs.video_extra_2 }}" \
                        --arg v3 "${{ github.event.inputs.video_extra_3 }}" \
                        '[ $v1, $v2, $v3 ] | map(select(. != null and . != ""))')

          jq -n \
            --arg id "${{ github.event.inputs.id }}" \
            --arg principal "${{ github.event.inputs.video_drive_id }}" \
            --arg logo "${{ github.event.inputs.logo_id }}" \
            --arg stream "${{ github.event.inputs.stream_url }}" \
            --argjson extras "$extras" \
            '{
              id: $id,
              video_principal: $principal,
              logo_id: $logo,
              videos_opcionais: $extras,
              stream_url: $stream
            }' > input.json

      - name: 📂 Exibir input.json
        run: cat input.json

      - name: 🧠 Executar unir.js
        run: node unir.js
        env:
          KEYFILE: chave.json
          INPUTFILE: input.json

      - name: ⬇️ Baixar logo (se fornecido)
        if: ${{ github.event.inputs.logo_id != '' && github.event.inputs.logo_id != null }}
        run: |
          node -e "
            const fs = require('fs');
            const { google } = require('googleapis');
            (async () => {
              const keyFile = 'chave.json';
              const auth = new (require('googleapis').google.auth.GoogleAuth)({keyFile, scopes: ['https://www.googleapis.com/auth/drive.readonly']});
              const client = await auth.getClient();
              const drive = google.drive({version: 'v3', auth: client});
              const dest = fs.createWriteStream('logo.png');
              const res = await drive.files.get({fileId: '${{ github.event.inputs.logo_id }}', alt: 'media'}, {responseType: 'stream'});
              res.data.pipe(dest);
              await new Promise(resolve => dest.on('finish', resolve));
              console.log('✅ Logo baixado');
            })().catch(e => {console.error(e); process.exit(1);});
          "

      - name: 🧾 Criar stream_info.json
        run: |
          echo "{\"stream_url\":\"${{ github.event.inputs.stream_url }}\",\"video_id\":\"${{ github.event.inputs.id }}\"}" > stream_info.json

      - name: 📤 Enviar artefatos (vídeo final, logo, info)
        uses: actions/upload-artifact@v4
        with:
          name: live-artifacts
          path: |
            video_unido.mp4
            logo.png
            stream_info.json

      - name: 📡 Iniciar transmissão com live.js
        run: node live.js
        env:
          KEYFILE: chave.json
          ARTIFACT_PATH: '.'
          SERVER_STATUS_URL: ${{ secrets.SERVER_STATUS_URL }}
